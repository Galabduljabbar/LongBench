{"pred": " } catch (RaspodelaException e) { JOptionPane.showMessageDialog(null, e.getMessage(), \"Upišite sve podaci za raspodelu!\", JOptionPane.ERROR_MESSAGE); } } private void handleLoadPrimerak() { List<Primerak> primerci = ((MonographInventarPanel)inventarPanel).getPrimerci(); raspodelaTable.setModel(new RaspodelaTableModel(primerci)); } private void handleSetPreostalo() { int brojPrim = Integer.parseInt(brojPrimTxtFld.getText()); int preostalo = Integer.parseInt(preostaloTxtFld.getText()); int raspodela = brojPrim - preostalo; raspodelaTableModel.setRaspodela(raspodela); } private void handleKeys(KeyEvent e) { if (e.getKeyCode() == KeyEvent.VK_ENTER) { handleAddPrimerak(); } } private void handleClose() { JOptionPane.showMessageDialog(null, \"U redu!\", \"Odustanak\", JOptionPane.INFORMATION_MESSAGE); dispose(); } private void handleRaspodeli() { int brojPrim = Integer.parseInt(brojPrimTxtFld.getText()); int preostalo = Integer.parseInt(preostaloTxtFld.getText()); int raspodela = brojPrim - preostalo; ((MonographInventarPanel)inventarPanel).setRaspodela(raspodela); JOptionPane.showMessageDialog(null, \"Raspodela je uspješna!\", \"U redu!\", JOptionPane.INFORMATION_MESSAGE); dispose(); } } ", "answers": ["\t\t\tString invKnj = invKnjPanel.getCode();"], "all_classes": null, "length": 451}
{"pred": " } ", "answers": ["                 SubCriteria[\"GroupID\"] = new SearchCondition<String>(\"GroupID\");"], "all_classes": null, "length": 475}
{"pred": " } ", "answers": ["\t\taliases.Add (\"GBK\", \"gb2312\");"], "all_classes": null, "length": 545}
{"pred": " def _parse_char_class(source): for class_name, class_contents in _BRACKET_CHARACTER_CLASSES.iteritems(): if class_name in source: source.put(class_name) return p.CharClass(class_contents) return None ", "answers": ["        if _parse_verbatim(source, '[:%s:]' % class_name):"], "all_classes": null, "length": 850}
{"pred": " plt.show() ", "answers": ["check = numbers[5][123]"], "all_classes": null, "length": 502}
{"pred": " sendBean(\"B\", 99, null); ", "answers": ["        sendBean(\"A\", null, null);"], "all_classes": null, "length": 756}
{"pred": " } ", "answers": ["                tree.setSelection(new TreeItem[] { item });"], "all_classes": null, "length": 1800}
{"pred": " hasUpdate.setSelected(isUpdate); ", "answers": ["        if (nilCard != null) {"], "all_classes": null, "length": 511}
{"pred": " float aspectRatio = (float) w / h; ", "answers": ["\t\t\tfloat r = (w+h)/2f;"], "all_classes": null, "length": 1042}
{"pred": " self.__repeat = (delay, interval) ", "answers": ["            self.__tick_id = gobject.timeout_add(10, self._tick_cb)"], "all_classes": null, "length": 703}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["    handler = handlers.LogLevelFilter(logged_critical, \"CRITICAL\")"], "all_classes": null, "length": 1196}
{"pred": " if self.getState() != 'idle' and self.getState() != 'deactivated': ", "answers": ["        if self.getState() == 'idle':"], "all_classes": null, "length": 885}
{"pred": " It looks like the code is incomplete. The next line of code is missing after the comment \"Next line of code:\". ", "answers": ["        List<String> requiredStatusNames ="], "all_classes": null, "length": 678}
{"pred": " await cmd.ExecuteArmed(this, null); ", "answers": ["                            await cmd.ExecuteArmed(this, null);"], "all_classes": null, "length": 3344}
{"pred": " this.label1.Location = new System.Drawing.Point(6, 13);\nthis.label1.Name = \"label1\";\nthis.label1.Size = new System.Drawing.Size(131, 18);\nthis.label1.TabIndex = 0;\nthis.label1.Text = \"Field\";\nthis.label1.TextAlign = System.Drawing.ContentAlignment.MiddleRight; ", "answers": ["\t\t\tthis.label1.Location = new System.Drawing.Point(6, 51);"], "all_classes": null, "length": 1316}
{"pred": " } catch (Exception ex) { error = ex; } ", "answers": ["\t\t\t\tif (assembly == null) {"], "all_classes": null, "length": 1336}
{"pred": " def get_intf_param_type(self): \"\"\"Get the type of input interface parameter if self.param_type == INTERFACE_FULL_NAME: return INTERFACE_FULL_NAME elif self.param_type == INTERFACE_TYPE: return INTERFACE_TYPE else: return INTERFACE_ALL ", "answers": ["        if self.interface == 'all':"], "all_classes": null, "length": 1718}
{"pred": " } ", "answers": ["    for (int i = 0; i < s.length(); i++)"], "all_classes": null, "length": 939}
{"pred": " ( m.Account as Server.Accounting.Account ).Username ); ", "answers": ["\t\t\t\t\t( m.Account as Server.Accounting.Account ).Username );"], "all_classes": null, "length": 805}
{"pred": " sead_partnn_l = findSeedNN(nodemap, c_sead, hub_threshld); ", "answers": ["                            if (c_sead == start || c_sead == stop) {"], "all_classes": null, "length": 1426}
{"pred": " this.Controls.Add(this._volumeRenderingRadio); ", "answers": ["\t\t\tthis.Size = new System.Drawing.Size(371, 300);"], "all_classes": null, "length": 825}
{"pred": " observations = observations + tourlist ", "answers": ["    behavior_list = [ checkOnTour(tourlist, o,"], "all_classes": null, "length": 609}
{"pred": " with Html(\"div\", class_=\"content\", id='subsection narrative') as sec8: sec8 += Html(\"h4\", self._(\"Miscellaneous\"), inline=True) sec8 += Html(\"br\", self._(\"Number of events\") + self.colon + \"%d\" % report.database.get_number_of_events(), inline=True) sec8 += Html(\"br\", self._(\"Number of places\") + self.colon + \"%d\" % report.database.get_number_of_places(), inline=True) sec8 += Html(\"br\", self._(\"Number of sources\") + self.colon + \"%d\" % report.database.get_number_of_sources(), inline=True) sec8 += Html(\"br\", self._(\"Number of citations\") + self.colon + \"%d\" % report.database.get_number_of_citations(), inline=True) sec8 += Html(\"br\", self._(\"Number of repositories\") + self.colon + \"%d\" % report.database.get_number_of_repositories(), inline=True) body += sec8 # add fullclear for proper styling # and footer section to page ", "answers": ["        footer = self.write_footer(None)"], "all_classes": null, "length": 960}
{"pred": " self.progress(\"TAKEOFF\") ", "answers": ["            if abs(m.relative_alt) > max_relalt_mm:"], "all_classes": null, "length": 577}
{"pred": " } ", "answers": ["\t\t\t\t\t\t\tif (strings[0] == \"GlobalSettings\")"], "all_classes": null, "length": 591}
{"pred": " System.arraycopy(src, srcOffset, buf, 0, byteCount); ", "answers": ["\t\t\t\tfor (int i = 0; i < byteCount; i++) {"], "all_classes": null, "length": 783}
{"pred": " opiRuntimeDelegate.setInput(input, persist); ", "answers": ["        if (opiRuntimeToolBarDelegate != null)"], "all_classes": null, "length": 813}
{"pred": " } ", "answers": ["            if (launcher != null && !e.isPopupTrigger()) {"], "all_classes": null, "length": 933}
{"pred": " The next line of code is not provided in the given code snippet. ", "answers": ["            (\"O`NEAL \\nCarol Joy\", \"Carol Joy O'Neal\"),"], "all_classes": null, "length": 919}
{"pred": " sort_by = sort[0]\nsort_order = sort[1] ", "answers": ["            if sort[0] == 'uploadDate':"], "all_classes": null, "length": 1853}
{"pred": " } ", "answers": ["                index = -1;"], "all_classes": null, "length": 1053}
{"pred": " class unionrepo.unionrepo(localrepo.localrepository): def __init__(self, ui, path, path2): localrepo.localrepository.__init__(self, ui, path) self.ui.setconfig('phases', 'publish', False, 'unionrepo') self._url = 'union:%s+%s' % (util.expandpath(path), util.expandpath(path2)) self.repo2 = localrepo.localrepository(ui, path2) @localrepo.unfilteredpropertycache def changelog(self): return unionchangelog(self.sopener, self.repo2.sopener) def _clrev(self, rev2): \"\"\"map from repo2 changelog rev to temporary rev in self.changelog\"\"\" node = self.repo2.changelog.node(rev2) return self.changelog.rev(node) @localrepo.unfilteredpropertycache def manifest(self): return unionmanifest(self.sopener, self.repo2.sopener, self._clrev) def url(self): return self._url def file(self, f): return unionfilelog(self.sopener, f, self.repo2.sopener, self._clrev, self) def close(self): self.repo2.close() def cancopy(self): return False def peer(self): return unionpeer(self) def getcwd(self): return os.getcwd() # always outside the repo ", "answers": ["                parentpath = parentpath[len(cwd):]"], "all_classes": null, "length": 795}
{"pred": " from talisker.sentry import get_log_handler ", "answers": ["        if sys.version_info[0] == 2:"], "all_classes": null, "length": 897}
{"pred": " m.Mana -= 20; ", "answers": ["                                m.Mana -= 20;"], "all_classes": null, "length": 569}
{"pred": " for field_name, field_value in hash_.items(): ", "answers": ["            for k, v in hash_.iteritems():"], "all_classes": null, "length": 546}
{"pred": " return page_not_authorized(req=req, referer=\"/edit\", text=auth_message, navtrail=navtrail) ", "answers": ["            return page_not_authorized(req=req, referer=\"/edit\","], "all_classes": null, "length": 756}
{"pred": " Next line of code: ", "answers": ["        - {key: usetty, section: ssh_connection}"], "all_classes": null, "length": 968}
{"pred": " } ", "answers": ["\t\tWardlistRecord data = (WardlistRecord)DataCollection.get(0);"], "all_classes": null, "length": 1476}
{"pred": " record_add_field(rec, '310', subfields=[('a', page_count)]) ", "answers": ["            record_add_field(rec, '300', subfields=[('a', page_count)])"], "all_classes": null, "length": 1283}
{"pred": " } ", "answers": ["                assertEquals(A.getQuick(r, NCOLUMNS - 1 - c), B.getQuick(r, c));"], "all_classes": null, "length": 1319}
{"pred": " # Send Unit Data Command Field ", "answers": ["                 lambda pkt: pkt.commandId == 0x6f),"], "all_classes": null, "length": 625}
{"pred": " // Reading GeoTIFF file ", "answers": ["\t\tfinal CoordinateReferenceSystem crs = reader.getCrs();"], "all_classes": null, "length": 805}
{"pred": " e.setCustomName(arena.getName() + \" - \" + this.name()); ", "answers": ["            Creature c = (Creature) e;"], "all_classes": null, "length": 386}
{"pred": " } ", "answers": ["\t\t\tushort* line = (ushort*)bd.Scan0;"], "all_classes": null, "length": 1243}
{"pred": " if (house == null) { house = BaseHouse.FindHouseAt(new Point3D(m.X, m.Y + 1, 127), m.Map, 16); if (house != null) { bonus = 50.0; } } ", "answers": ["                    if (house == null)"], "all_classes": null, "length": 585}
{"pred": " {\n\t\t\t\t\t\tConsole.WriteLine(\"Name: {0}\", displaySet.Name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} ", "answers": ["\t\t\t\t\t\tConsole.WriteLine(\" > {0}\", displaySet.Descriptor.Description);"], "all_classes": null, "length": 803}
{"pred": " def find_reader(fname): readers = [PicoquantFile, TimetagFile, RawFile, RawChFile] for reader in readers: if ext in reader.extensions: return reader ", "answers": ["    exts = supported_extensions()"], "all_classes": null, "length": 653}
{"pred": " } ", "answers": ["\t\t\t\t\t\tGraphNode cgn = graphNodes.get(cell);"], "all_classes": null, "length": 1113}
{"pred": " case 188: // =- key if (down) { Program.keyH_ENT = (Program.keyH_ENT & (~4)); Program.keyB_SPC = (Program.keyB_SPC & (~2)); Program.keyCAPS_V = (Program.keyCAPS_V | 1); } else { Program.keyH_ENT = (Program.keyH_ENT | 4); Program.keyH_ENT = (Program.keyH_ENT | 2); Program.keyB_SPC = (Program.keyB_SPC | 2); } break; ", "answers": ["\t\t\t    case 189: // -/_ key"], "all_classes": null, "length": 1748}
{"pred": " out_list += [weights_dmat_all[index]] out_comment += ['Weights'] out_units += [''] ", "answers": ["        out_list += [weights_dmat_all[index]]"], "all_classes": null, "length": 1374}
{"pred": " Raises NotImplementedError ", "answers": ["    obj = obj.lstrip(\"\\ufeff\")"], "all_classes": null, "length": 676}
{"pred": " if (orig == null || !orig.exists() || orig.length() == 0) return; ", "answers": ["\t\tif (orig == null || !orig.exists() || orig.length() == 0)"], "all_classes": null, "length": 866}
{"pred": " } ", "answers": ["            for (PlayerScore scoreTable : this.scoreTable) {"], "all_classes": null, "length": 1212}
{"pred": " assert res.status_code == 401 ", "answers": ["            res = c.get(\"/\")"], "all_classes": null, "length": 919}
{"pred": " nsClientService = mLocalBinder; ", "answers": ["                nsClientService = mLocalBinder.getServiceInstance();"], "all_classes": null, "length": 516}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["            if arch == \"amd64\":"], "all_classes": null, "length": 982}
{"pred": " } ", "answers": ["\t\tfor(int i=0; i<length; i++){"], "all_classes": null, "length": 3890}
{"pred": " } ", "answers": ["\t\t\t\tAddRes( index, typeof( BrilliantAmber ), 1032697, 1, 1044240 );"], "all_classes": null, "length": 3677}
{"pred": " capsys.assertRegex(options.stdout, r\"Usage: prop2po\\s+[-h|--help]\\s+[-V|--version]\") ", "answers": ["        options = self.help_check(options, \"-P, --pot\")"], "all_classes": null, "length": 1336}
{"pred": " sw.WriteLine (\"\\t\\tpublic virtual IntPtr GetType ()\"); ", "answers": ["\t\t\tforeach (Signal sig in sigs.Values) {"], "all_classes": null, "length": 1298}
{"pred": " Next line of code: ", "answers": ["    module = AnsibleModule(argument_spec=fields,"], "all_classes": null, "length": 1009}
{"pred": " } ", "answers": ["    if (node instanceof MutableNode) {"], "all_classes": null, "length": 568}
{"pred": " return prevChildren; ", "answers": ["            var page = prevChildren.Take(StartPagingTreshold).ToList();"], "all_classes": null, "length": 781}
{"pred": " soaResponse = dns.message.make_response(query) ", "answers": ["        soaResponse = dns.message.make_response(query)"], "all_classes": null, "length": 648}
{"pred": " if (kind == null) { throw new IllegalArgumentException(\"Invalid javaccKind: \" + javaccKind); } return kind; } ", "answers": ["        if (kind == null) {"], "all_classes": null, "length": 524}
{"pred": " } ", "answers": ["            return this.FindControlRecursive(DescriptionControlID) as Label;"], "all_classes": null, "length": 450}
{"pred": " query_args = urllib.urlencode(query_args or {}) ", "answers": ["            path += '?' + query_args"], "all_classes": null, "length": 1198}
{"pred": " float top = globalOffsetY + getPosY(lt, localScale); ", "answers": ["\t\t\t\tRectF destRect = new RectF(left, top, right, bottom);"], "all_classes": null, "length": 1184}
{"pred": " } ", "answers": ["            HueInfo = new Dictionary<DyeType, Tuple<int, int>>();"], "all_classes": null, "length": 535}
{"pred": " } ", "answers": ["                final Modal modal = new Modal();"], "all_classes": null, "length": 698}
{"pred": " } ", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 1270}
{"pred": " 'list.append(self.file) ", "answers": ["            if os.access(self.file + os.extsep + ext, os.F_OK):"], "all_classes": null, "length": 1142}
{"pred": " } ", "answers": ["        if (description != null) {"], "all_classes": null, "length": 1934}
{"pred": " all_plugins = self._bot.plugin_manager.get_all_plugin_names() ", "answers": ["            all_plugins = self._bot.plugin_manager.get_all_plugin_names()"], "all_classes": null, "length": 833}
{"pred": " vdom = data['vdom'] state = data['state'] system_switch_interface_data = data['system_switch_interface'] filtered_data = underscore_to_hyphen(filter_system_switch_interface_data(system_switch_interface_data)) if state == \"present\": return fos.set('system', 'switch-interface', data=filtered_data, vdom=vdom) elif state == \"absent\": return fos.delete('system', 'switch-interface', mkey=filtered_data['name'], vdom=vdom) ", "answers": ["                \"vdom\": {\"required\": False, \"type\": \"str\"}"], "all_classes": null, "length": 1164}
{"pred": " throw new IOException(\"Stream has not been marked\"); ", "answers": ["            throw new IOException();"], "all_classes": null, "length": 880}
{"pred": " case ActivitydiagramPackage.TRACED_ACTIVITY__TRACE_SEQUENCE: return traceSequence != null && !traceSequence.isEmpty(); } return super.eIsSet(featureID); } } ", "answers": ["\t\t\t\treturn originalObject != null;"], "all_classes": null, "length": 533}
{"pred": " import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode; import org.opennms.netmgt.model.OnmsIpInterface; import org.opennms.netmgt.model.OnmsMonitoredService; import org.opennms.netmgt.model.OnmsSnmpInterface; import org.opennms.netmgt.model.OnmsNode ", "answers": ["\t\tList<Event> events = new LinkedList<Event>();"], "all_classes": null, "length": 888}
{"pred": " if tables: publication.create(tables, params, owner, check_mode=True) else: publication.create(check_mode=True) ", "answers": ["    if state == 'present':"], "all_classes": null, "length": 2176}
{"pred": " } ", "answers": ["\t\t\tint version = reader.ReadInt();"], "all_classes": null, "length": 737}
{"pred": " of log(softplus(..)) which will not give us the desired result. To work around this, we need to apply the softplus inside the scan op as well. This is done by using theano.scan(lambda x: T.log(T.nnet.sigmoid(T.log(x))), ...). ", "answers": ["        of log(sigmoid(..)) and will not apply the wanted"], "all_classes": null, "length": 1545}
{"pred": " } ", "answers": ["            ITripChain chain = (ITripChain)MemberwiseClone();"], "all_classes": null, "length": 798}
{"pred": " } ", "answers": ["        role = new FigRole();"], "all_classes": null, "length": 2539}
{"pred": " catch(Exception ex) { _operational = false; _perfCounter = null; } ", "answers": ["                    if (LogManager.ThrowExceptions) throw ex;"], "all_classes": null, "length": 849}
{"pred": " assert checksums.get(block=False) == (\"foo-1\", \"6eb26b253797a1f3c3f2e8c3b2f2c810d59e1e15\") ", "answers": ["            name, checksum = checksums.get(block=False)"], "all_classes": null, "length": 599}
{"pred": " @stacker(Pseudop.JUMP_IF_FALSE) ", "answers": ["        dest = args[0]"], "all_classes": null, "length": 655}
{"pred": " if mem_len > len: mem_len = len result += [cur.virtual_addr, prog_ofs, mem_len, file_len] len -= mem_len return result ", "answers": ["\t\t\t\tresult += [DATA_ORIGINAL] * mem_len"], "all_classes": null, "length": 1032}
{"pred": " } catch (MacroException e) { return value; } String result = value.substring(0, startIndex) + macroHandler.resolveMacro(value.substring(startIndex)); return result; } ", "answers": ["\t\t\tStringBuffer result = new StringBuffer();"], "all_classes": null, "length": 3860}
{"pred": " } else { elements.add(new ASN1Boolean(false)); } if (! includeAuthZEntry) { elements.add(new ASN1Boolean(false)); } if (attributes != null && ! attributes.isEmpty()) { elements.add(new ASN1OctetString(new ArrayList<>(attributes))); } return new ASN1Sequence(elements); } } ", "answers": ["      elements.add(new ASN1Boolean(TYPE_INCLUDE_AUTHN_ENTRY, false));"], "all_classes": null, "length": 1468}
{"pred": " } ", "answers": ["\t\tif(beans == null)"], "all_classes": null, "length": 773}
{"pred": " return new EmptyIterator<>(); ", "answers": ["\t\t\treturn new EmptyIterator<String>();"], "all_classes": null, "length": 526}
{"pred": " } ", "answers": ["            var serializer = GetResponseSerializer(contentType);"], "all_classes": null, "length": 488}
{"pred": " else\n        {\n            Guid newCaseId = CreateCase(contactInfo);\n            launchUrl(createUrl(newCaseId.ToString(), ContactTypes.Lead, null, \"NotNull\"));\n        }\n    }\n  }\n} ", "answers": ["            string CallNumberGuid = CallNumber.ToString();"], "all_classes": null, "length": 648}
{"pred": " } ", "answers": ["        text = text.substring(nextToken + 7);"], "all_classes": null, "length": 772}
{"pred": " n = m + i16 - 2; ", "answers": ["        if ((i != i7 ? 0 : 1) != 0) {"], "all_classes": null, "length": 1437}
{"pred": " } ", "answers": ["                if (debug != null) {"], "all_classes": null, "length": 983}
{"pred": " } ", "answers": ["      ProxyInfo proxy_info = (ProxyInfo) proxyCell.getUserObject();"], "all_classes": null, "length": 2936}
{"pred": " } ", "answers": ["                object obj = this.ViewState[\"SubmitText\"];"], "all_classes": null, "length": 1411}
{"pred": " for artist in self.collection: ", "answers": ["                for song in self.collection[artist][album]:"], "all_classes": null, "length": 826}
{"pred": " } ", "answers": ["        SecurityManager sm = System.getSecurityManager();"], "all_classes": null, "length": 3987}
{"pred": " MarkOrderAsPaid(order); ", "answers": ["\t\t\t\torder.ShippingStatusId = (int)ShippingStatus.Delivered;"], "all_classes": null, "length": 5265}
{"pred": " import java.sql.Connection; ", "answers": ["        AutoNumberingScheme ans = new AutoNumberingScheme();"], "all_classes": null, "length": 5629}
{"pred": " } ", "answers": ["\t\t\tvar source = Read<int> ();"], "all_classes": null, "length": 5586}
{"pred": " } ", "answers": ["\t\t\t\t\tArrayList<String> valuesList = new ArrayList<String>();"], "all_classes": null, "length": 4724}
{"pred": " return self._conf_helper('sp', options) ", "answers": ["        if dev_obj == self.fetch:"], "all_classes": null, "length": 4119}
{"pred": " return success; ", "answers": ["    return success ? suggestedClassName : null;"], "all_classes": null, "length": 6878}
{"pred": " I'm sorry, but the code you provided is incomplete. It seems to be missing the implementation of the `shell` method. Could you please provide the complete code so that I can assist you better? ", "answers": ["            s = Workplane().box(1,1,1).faces(\"+Z\").edges().fillet(0.1)"], "all_classes": null, "length": 4053}
{"pred": " pass ", "answers": ["            fifoCount = self.getFIFOCount()"], "all_classes": null, "length": 6204}
{"pred": " @frappe.whitelist() def bulk_print_memberships(names): ", "answers": ["\t\tnames = names['names']"], "all_classes": null, "length": 4346}
{"pred": "", "answers": ["\t\t\t\twhile (itHistory.hasNext()) {"], "all_classes": null, "length": 4200}
{"pred": " } ", "answers": ["                list.Add(1072378); // <br>Only when full set is present:\t\t\t\t"], "all_classes": null, "length": 6963}
{"pred": " } else if (d < 16) {\n         sb.append((char) ('A' + (d - 10)));\n      } else {\n         sb.append((char) ('a' + (d - 16)));\n      }\n      sb.append(c % 16);\n   } ", "answers": ["         sb.append((char) ('a' + d - 10));"], "all_classes": null, "length": 4005}
{"pred": " } ", "answers": ["\t\t\tvar player = Players[e.Msg.whoAmI];"], "all_classes": null, "length": 4973}
{"pred": " // verify the required parameter 'organizationId' is set ", "answers": ["        if (organizationId == null) {"], "all_classes": null, "length": 5074}
{"pred": " * +1    OK ", "answers": ["            X           -   array[0..N-1] - array of quadrature nodes,"], "all_classes": null, "length": 4527}
{"pred": " ) ", "answers": ["            'deleting_user', parent.version_agnostic(), category_queue[0]"], "all_classes": null, "length": 4289}
{"pred": " } else { // not \"log10\"-type label if (this.expTickLabelsFlag) { // if \"1e#\"-style tick labels tickLabel = \"1e\" + i; // create label for tick } else { // not \"1e#\"-style tick labels if (i >= 0) { // positive exponent if (format != null) { tickLabel = format.format(tickVal); } else { tickLabel = Long.toString((long) Math.rint(tickVal)); } } else { // negative exponent if (i < 0) { // negative exponent if (format != null) { tickLabel = format.format(tickVal); } else { tickLabel = Long.toString((long) Math.rint(tickVal)); } } // create fractional value set exact number of fractional digits to be shown: this.numberFormatterObj.setMaximumFractionDigits(-i); tickLabel = this.numberFormatterObj.format(tickVal); } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } } ", "answers": ["                                            + \"10^\" + Math.abs(i));"], "all_classes": null, "length": 4434}
{"pred": " .map(pushedAsset -> pushedAsset.getPushDate().getTime()) .collect(Collectors.toList()); ", "answers": ["                .map(pushedAsset -> pushedAsset.getEnvironmentId())"], "all_classes": null, "length": 6390}
{"pred": " } ", "answers": ["        String fileName1 = \"fileOne_\" + RUNID + \".txt\";"], "all_classes": null, "length": 4714}
{"pred": " } catch (NumberFormatException ex) { fail(\"createNumber(\" + val + \") failed: \" + ex.getMessage()); } ", "answers": ["            if (obj == null) {"], "all_classes": null, "length": 4128}
{"pred": " } ", "answers": ["                                if (grapple.DockUid != part.Uid)"], "all_classes": null, "length": 4169}
{"pred": " if not context.get(MODULE_UNINSTALL_FLAG): ", "answers": ["            ir_values_obj = pooler.get_pool(cr.dbname).get('ir.values')"], "all_classes": null, "length": 4578}
{"pred": " } ", "answers": ["            return actionTL.getVolatile() == SYNCHRONIZE_CODE;"], "all_classes": null, "length": 4390}
{"pred": " } ", "answers": ["\t\t\tlong size = lgetxattr (path, name, value, 0);"], "all_classes": null, "length": 6868}
{"pred": " } ", "answers": ["\t\t\t\tsuper(id, path, width, height);"], "all_classes": null, "length": 5167}
{"pred": " throws java.io.IOException if there is an error ", "answers": ["        if( source == null ){"], "all_classes": null, "length": 5175}
{"pred": " } ", "answers": ["\t\t\t\tnew ColumnInfo (\"IsCaseSensitive\", typeof(bool)),"], "all_classes": null, "length": 4122}
{"pred": " } ", "answers": ["\t\t\t\tBigInteger tn = u1.Subtract(v1.Multiply(q[0]));"], "all_classes": null, "length": 5148}
{"pred": " } ", "answers": ["\t\t\t\tif (_abi_info == null)"], "all_classes": null, "length": 4205}
{"pred": " } ", "answers": ["                if (!name.endsWith(\".\" + filter.getExtension())) {"], "all_classes": null, "length": 5940}
{"pred": " 5: SortableHeader('Outline', False, '', 'col-center'), ", "answers": ["                5: SortableHeader('Outline', False, '', 'col-center'),"], "all_classes": null, "length": 4072}
{"pred": " } ", "answers": ["            string[][] ss11 = new string[][] { s111, s112 };"], "all_classes": null, "length": 4165}
{"pred": " def __init__(self, *args, **kwargs): ", "answers": ["            field = opts.get_field(unique_check[0])"], "all_classes": null, "length": 4513}
{"pred": " outfile.write(\"\\n\") ", "answers": ["            for key, value in sorted(paramtestdic.iteritems()):"], "all_classes": null, "length": 4363}
{"pred": " @parthandler('check:heads', ('heads',)) def handlecheckheads(op, inpart): \"\"\"check that head of the repo did not change This is used to detect a push race when using unbundle. This replaces the \"heads\" argument of unbundle.\"\"\" h = inpart.read(20) heads = [] for i in range(len(h)): heads.append(int(h[i], 16)) if heads != op.repo.heads: raise util.Abort(_('heads changed')) ", "answers": ["    while len(h) == 20:"], "all_classes": null, "length": 4561}
{"pred": " } ", "answers": ["        prefWidth = Math.min(prefWidth, width);"], "all_classes": null, "length": 6347}
{"pred": " cas_data_str = cas_data.decode('utf-8') ", "answers": ["        cas = literal_eval(cas_data_str)"], "all_classes": null, "length": 5088}
{"pred": "", "answers": ["\t\t\t\t\tpixel = cursor_bitmap.GetPixel(x, y);"], "all_classes": null, "length": 6831}
{"pred": " } ", "answers": ["\t\t\tList<DateTime> listUniqueDays=new List<DateTime>();"], "all_classes": null, "length": 4064}
{"pred": " pMem2.enc == SQLITE_UTF8 ); ", "answers": ["        pMem1.enc == SQLITE_UTF16LE || pMem1.enc == SQLITE_UTF16BE );"], "all_classes": null, "length": 5688}
{"pred": " data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i); ", "answers": ["                        data.MaxPower[i] = packet.ReadInt32(\"MaxPower\", indexes, i);"], "all_classes": null, "length": 4140}
{"pred": "", "answers": ["        seq = self.seqs[nidx]"], "all_classes": null, "length": 7755}
{"pred": " } ", "answers": ["            Index[] perClassIndexes = indexByTagAndClass[tag];"], "all_classes": null, "length": 5112}
{"pred": " } ", "answers": ["            this.quoteLabel.Size = new System.Drawing.Size(46, 16);"], "all_classes": null, "length": 4569}
{"pred": " @api.model def create(self, values): if not values.get(\"email\") and values.get(\"common_name\"): common_nameval = values.get(\"common_name\").split(':') email = [x for x in common_nameval if '@' in x] # TODO JEM : should be refactored values['email'] = email and email[0] or '' values['common_name'] = values.get(\"common_name\") return super(Attendee, self).create(values) ", "answers": ["            data['rrule_type'] = rrule_type[rule._freq]"], "all_classes": null, "length": 4433}
{"pred": " } ", "answers": ["                fout.Write(curr, 0, curr.Length);"], "all_classes": null, "length": 6006}
{"pred": " } ", "answers": ["      get { return DefaultInstance; }"], "all_classes": null, "length": 5791}
{"pred": " } ", "answers": ["                        AApDocumentDetailRow DetailRow = (AApDocumentDetailRow)rv.Row;"], "all_classes": null, "length": 5677}
{"pred": " } ", "answers": ["\t\t\t\tif (RewardItem != null)"], "all_classes": null, "length": 4101}
{"pred": " } ", "answers": ["\t            return lastItemIndex - firstItemIndex + 1;"], "all_classes": null, "length": 5727}
{"pred": " } ", "answers": ["                if (AControlLabel != null)"], "all_classes": null, "length": 7766}
{"pred": " } ", "answers": ["\t\t\treturn Unique(target, null);"], "all_classes": null, "length": 4367}
{"pred": " DT_PPC64_GLINK = (DT_LOPROC + 0) ", "answers": ["DT_PPC64_OPD    = (DT_LOPROC + 1)"], "all_classes": null, "length": 6803}
{"pred": " } ", "answers": ["                html.WriteLine(\"      table { width: 100%; }\");"], "all_classes": null, "length": 5413}
{"pred": " case InputReport.OutputReportAck: ", "answers": ["\t\t\tbuff[4] = (byte)(address & 0x000000ff);"], "all_classes": null, "length": 5328}
{"pred": " elif p == 1: ", "answers": ["                    sd[node.split_dim] = np.abs(node.split - x[node.split_dim])"], "all_classes": null, "length": 5233}
{"pred": " } ", "answers": ["\t\tassertEquals(acn, rules.formatGame(game, Locale.ENGLISH));"], "all_classes": null, "length": 4129}
{"pred": " catch(Exception e) { } ", "answers": ["    catch (InvalidRelationException e){}"], "all_classes": null, "length": 7770}
{"pred": " } ", "answers": ["\t\t\t\t\tstring str = reader.ReadString();"], "all_classes": null, "length": 5717}
{"pred": " if(newsector != null) { if(ld.FrontInterior && !frontsdone[i]) { ld.Sector = newsector; } else if(!ld.FrontInterior && !backsdone[i]) { ld.Sector = newsector; } } else { ld.Sector = null; } } } } } return sidescreated; } ", "answers": ["\t\t\t\t\t\t\t\tif(newsector == null) return false;"], "all_classes": null, "length": 5677}
{"pred": " @login_required @check_readonly @prevent_indexing @never_cache @newrelic.agent.function_trace def document(request, document_slug, document_locale): \"\"\" View a wiki document. \"\"\" # PUT requests go to the write API. if request.method == 'PUT': if (not request.authkey and not request.user.is_authenticated()): raise PermissionDenied return _document_PUT(request, document_slug, document_locale) fallback_reason = None slug_dict = _split_slug(document_slug) # Is there a document at this slug, in this locale? doc, fallback_reason = _get_doc_and_fallback_reason(document_locale, document_slug) if doc is None: # Possible the document once existed, but is now deleted. # If so, show that it was deleted. deletion_logs = _check_for_deleted_document(document_locale, document_slug) if deletion_logs.exists(): return _document_deleted(request, deletion_logs) # We can throw a 404 immediately if the request type is HEAD. # TODO: take a shortcut if the document was found? if request.method == 'HEAD': raise Http404 # Check if we should fall back to default locale. fallback_doc, fallback_reason, redirect_url = _default_locale_fallback( request, document_slug, document_locale) if fallback_doc is not None: doc = fallback_doc if redirect_url is not None: return redirect(redirect_url) else: if _check_404_params(request): raise Http404 # The user may be trying to create a child page; if a parent exists for this document, redirect them to the \"Create\" page # Otherwise, they could be trying to create a main level doc. create_url = _document_redirect_to_create(document_slug, document_locale, slug_dict) return redirect(create_url) # We found a Document. Now we need to figure out how we're going # to display it. # Step 1: If we're a redirect, and redirecting hasn't been disabled, redirect. # Obey explicit redirect pages: # Don't redirect on redirect=no (like Wikipedia), so we can link from a # redirected-to-page back to a \"Redirected from...\" link, so you can edit # the redirect. redirect_url = (None if request.GET.get('redirect') == 'no' else doc.redirect_url()) if redirect_url and redirect_url != doc.get_absolute_url(): url = urlparams(redirect_url, query_dict=request.GET) # TODO: Re-enable the link in this message after Django >1.5 upgrade # Redirected from <a href=\"%(url)s?redirect=no\">%(url)s</a> messages.add_message( request, messages.WARNING, mark_safe(_(u'Redirected from %(url)s') % { \"url\": request.build_absolute_uri(doc.get_absolute_url()) }), extra_tags='wiki_redirect') return HttpResponsePermanentRedirect(url) # Step 2: Kick 'em out if they're not allowed to view this Document. if not request.user.has_perm('wiki.view_document', doc): raise PermissionDenied # Step 3: Read some request params to see what we're supposed to # do. rendering_params = {} for param in ('raw', 'summary', 'include', 'edit_links'): rendering_params[param] = request.GET.get(param, False) rendering_params['section'] = request.GET.get('section', None) rendering_params['render_raw_fallback'] = False rendering_params['use_rendered'] = kumascript.should_use_rendered(doc, request.GET) # Step 4: Get us some HTML to play with. doc_html, ks_errors, render_raw_fallback = _get_html_and_errors( request, doc, rendering_params) rendering_params['render_raw_fallback'] = render_raw_fallback toc_html = None # Step 5: Start parsing and applying filters. if not doc.is_template: toc_html = _generate_toc_html(doc, rendering_params) doc_html = _filter_doc_html(request, doc, doc_html, rendering_params) # Step 6: If we're doing raw view, bail out to that now. if rendering_params['raw']: return _document_raw(request, doc, doc_html, rendering_params) # Get the contributors. (To avoid this query, we could render the contributors right into the Document's html field.) # NOTE: .only() avoids a memcache object-too-large error for large wiki # pages when an attempt is made to cache all revisions contributors = set([r.creator for r in doc.revisions .filter(is_approved=True) .only('creator') .select_related('creator')]) # TODO: Port this kitsune feature over, eventually: # https://github.com/jsocol/kitsune/commit/ f1ebb241e4b1d746f97686e65f49e478e28d89f2 # Get the SEO summary seo_summary = '' if not doc.is_template: seo_summary = doc.get_summary_text() # Get the additional title information, if necessary. seo_parent_title = _get_seo_parent_title(slug_dict, document_locale) # Retrieve file attachments attachments = attachments_json(doc.attachments) # Retrieve pre-parsed content hunks if doc.is_template: quick_links_html, zone_subnav_html = None, None body_html = doc_html else: quick_links_html = doc.get_quick_links_html() zone_subnav_html = doc.get_zone_subnav_html() body_html = doc.get_body_html() share_text = _('I learned about %(title)s on MDN.') # Step 8: Bundle it all up and, finally, return. context = { 'document': doc, 'document_html': doc_html, 'toc_html': toc_html, 'quick_links_html': quick_links_html, 'zone_subnav_html': zone_subnav_html, 'body_html': body_html, 'contributors': contributors, 'fallback_reason': fallback_reason, 'kumascript_errors': ks_errors, 'render_raw_fallback': rendering_params['render_raw_fallback'], 'seo_summary': seo_summary, 'seo_parent_title': seo_parent_title, 'share_text': share_text, 'attachment_data': attachments, 'attachment_data_json': json.dumps(attachments), 'search_url': referrer_url(request) or '', } response = render(request, 'wiki/document.html', context) return _set_common_headers(doc, rendering_params['section'], response) ", "answers": ["        doc = parent_doc.translations.get(locale=document_locale)"], "all_classes": null, "length": 4854}
{"pred": " } ", "answers": ["                lDummyHeights [i] = lNewMaxRows;"], "all_classes": null, "length": 5053}
{"pred": " } ", "answers": ["\t\t\t\t\t\treferenceNode.AddLinkTo( GetReferenceNode( script ) );"], "all_classes": null, "length": 4267}
{"pred": " } ", "answers": ["\t\t\t\t\t\tif (trait != null)"], "all_classes": null, "length": 5181}
{"pred": " return self.__class__(values) ", "answers": ["        return self.__class__(values, key=self._key)"], "all_classes": null, "length": 7674}
{"pred": " def _finalize_loaded(self, states): for state in states: state.expire(state.dict, self.session.identity_map._modified) ", "answers": ["        for state, dict_ in states.items():"], "all_classes": null, "length": 4268}
{"pred": " } ", "answers": ["                    else if (this.RequiredRace == Race.Gargoyle)"], "all_classes": null, "length": 4125}
{"pred": " } ", "answers": ["\t\t\t\tnew syspalvalue { @class = \"LEOP\", value = 0, name = \"TABLE\" },"], "all_classes": null, "length": 7135}
{"pred": " } ", "answers": ["        if (emails == null) {"], "all_classes": null, "length": 4282}
{"pred": " } ", "answers": ["            if (Diff.Count > 0 && DiffMode)"], "all_classes": null, "length": 4201}
{"pred": " } ", "answers": ["\t\t\tint n = BZip2Constants.baseBlockSize * blockSize100k;"], "all_classes": null, "length": 5391}
{"pred": " } ", "answers": ["                        var a = Actors[args[1]];"], "all_classes": null, "length": 4518}
{"pred": " } ", "answers": ["                    if (iFile != null)"], "all_classes": null, "length": 4288}
{"pred": " trackError += trackSegmentError; ", "answers": ["\t\t\tif (trackSegmentError > trackError)"], "all_classes": null, "length": 5623}
{"pred": " } ", "answers": ["\t\t\t\t\"    {0}\" +"], "all_classes": null, "length": 5620}
{"pred": " } ", "answers": ["                    ExtraMissileNames = new[] { \"JhinRShotMis4\" },"], "all_classes": null, "length": 4463}
{"pred": " } ", "answers": ["                            if (m_House.MovingCrate != null)"], "all_classes": null, "length": 5532}
{"pred": " } ", "answers": ["\t\tString title = getFirstString();"], "all_classes": null, "length": 5653}
{"pred": "widgetName = widgetName.decode('utf-8')[::-1] ", "answers": ["                        widgetTempName = xbmc.getInfoLabel(widgetName)"], "all_classes": null, "length": 6955}
{"pred": " } ", "answers": ["        byte[] encoded = null;"], "all_classes": null, "length": 5023}
{"pred": " } ", "answers": ["            mnem[ishr] = \"ishr\";"], "all_classes": null, "length": 6113}
{"pred": "", "answers": ["            umask = os.umask(0)"], "all_classes": null, "length": 7132}
{"pred": " } ", "answers": ["\t\t\t\t\tforeach (var mi in Menus [selected].Children){"], "all_classes": null, "length": 7643}
{"pred": " } ", "answers": ["        int lastPixelOffset = (width - 1) * pixelStride;"], "all_classes": null, "length": 4323}
{"pred": "", "answers": ["        shm = int(open(filename).read().split()[2])"], "all_classes": null, "length": 7764}
{"pred": " @app.route('/send-rsvp', methods=['POST']) ", "answers": ["    exclude_types = args.get('exclude_types')"], "all_classes": null, "length": 4956}
{"pred": " class CourseEnrollment(models.Model): ", "answers": ["    objects = CourseEnrollmentManager()"], "all_classes": null, "length": 4276}
{"pred": " for key in keys: ", "answers": ["        system_id = self.get_system_id(system)"], "all_classes": null, "length": 5050}
{"pred": " 'y': { 'name': 'AbsoluteDynamicEvent', 'text': 'y', 'type': 'ly:prob?', 'types': ('general-music', 'post-event', 'event', 'dynamic-event', 'absolute-dynamic-event',) }, ", "answers": ["        'types': ('general-music', 'sequential-music',),"], "all_classes": null, "length": 4888}
{"pred": " .Append (base.Text[0]) .Append (\" \") .Append (base.Text[1]) .Append (\"...\") .Append (\" \") .Append (base.Text[base.Text.Length - 1]) .Append (\"] \") .ToString(); ", "answers": ["\t\t\t\t.Append (base.ToString ()).ToString ();"], "all_classes": null, "length": 5367}
{"pred": " } ", "answers": ["                if (chr.Shell == IntPtr.Zero || chr.Body == IntPtr.Zero)"], "all_classes": null, "length": 6278}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        update_t = StatusUpdater(total_recs, finished_queue)"], "all_classes": null, "length": 6540}
{"pred": " @api.model class account_invoice_line(models.Model): _name = \"account.invoice.line\" _description = \"Invoice Line\" _order = \"invoice_id,sequence,id\" @api.one @api.depends('price_unit', 'discount', 'invoice_line_tax_id', 'quantity', 'product_id', 'invoice_id.partner_id', 'invoice_id.currency_id') def _compute_price(self): price = self.price_unit * (1 - (self.discount or 0.0) / 100.0) taxes = self.invoice_line_tax_id.compute_all(price, self.quantity, product=self.product_id, partner=self.invoice_id.partner_id) self.price_subtotal = taxes['total'] if self.invoice_id: self.price_subtotal = self.invoice_id.currency_id.round(self.price_subtotal) @api.model def _default_price_unit(self): if not self._context.get('check_total'): return 0 total = self._context['check_total'] for l in self._context.get('invoice_line', []): if isinstance(l, (list, tuple)) and len(l) >= 3 and l[2]: vals = l[2] price = vals.get('price_unit', 0) * (1 - vals.get('discount', 0) / 100.0) total = total - (price * vals.get('quantity')) taxes = vals.get('invoice_line_tax_id') if taxes and len(taxes[0]) >= 3 and taxes[0][2]: taxes = self.env['account.tax'].browse(taxes[0][2]) tax_res = taxes.compute_all(price, vals.get('quantity'), product=vals.get('product_id'), partner=self._context.get('partner_id')) for tax in tax_res['taxes']: total = total - tax['amount'] return total @api.model def _default_account(self): # XXX this gets the default account for the user's company, # it should get the default account for the invoice's company # however, the invoice's company does not reach this point if self._context.get('type') in ('out_invoice', 'out_refund'): return self.env['ir.property'].get('property_account_income_categ', 'product.category') else: return self.env['ir.property'].get('property_account_expense_categ', 'product.category') name = fields.Text(string='Description', required=True) origin = fields.Char(string='Source Document', help=\"Reference of the document that produced this invoice.\") sequence = fields.Integer(string='Sequence', default=10, help=\"Gives the sequence of this line when displaying the invoice.\") invoice_id = fields.Many2one('account.invoice', string='Invoice Reference', ondelete='cascade', index=True) uos_id = fields.Many2one('product.uom', string='Unit of Measure', ondelete='set null', index=True) product_id = fields.Many2one('product.product', string='Product', ondelete='set null', index=True) account_id = fields.Many2one('account.account', string='Account', required=True, domain=[('type', 'not in', ['view', 'closed'])], default=_default_account, help=\"The income or expense account related to the selected product.\") price_unit = fields.Float(string='Unit Price', required=True, ", "answers": ["        digits= dp.get_precision('Product Price'),"], "all_classes": null, "length": 4978}
{"pred": " @property def conductance_based(self): \"\"\" True if the post-synaptic response is modelled as a change in conductance, False if a change in current. \"\"\" return all(p.celltype.conductance_based for p in self.populations) ", "answers": ["        data = self.get_data(variables, gather, clear, annotations)"], "all_classes": null, "length": 5678}
{"pred": " return -value; ", "answers": ["                Class<? extends Number> type = value.getClass();"], "all_classes": null, "length": 5044}
{"pred": " MissileSpellName = \"LucianRMis\", ", "answers": ["                    ExtraMissileNames = new[] { \"lucianrmissile\" },"], "all_classes": null, "length": 5265}
{"pred": " \"   NEW: \" + nodeUpdate); ", "answers": ["                    \"   NEW: \" + nodeUpdate);"], "all_classes": null, "length": 6068}
{"pred": " } ", "answers": ["      for (i = startOfLineIndex; i < endOfLineIndex; ++i) {"], "all_classes": null, "length": 4941}
{"pred": " } ", "answers": ["\t\t\t\tyAxis.DrawGrid( g, this, scaleFactor, shiftPos );"], "all_classes": null, "length": 4173}
{"pred": " if (info < 0) throw new ILArgumentException(\"qr: an error occured during decomposition\"); ", "answers": ["            if (info < 0)"], "all_classes": null, "length": 4728}
{"pred": " } ", "answers": ["                if ((c != null)"], "all_classes": null, "length": 9124}
{"pred": "", "answers": ["\t\t\t\tswitch (c) {"], "all_classes": null, "length": 8996}
{"pred": "", "answers": ["        depStates = { n : s.copy() for (n,s) in states.items() }"], "all_classes": null, "length": 8648}
{"pred": " } ", "answers": ["            if (pane.Items.Count > 1)"], "all_classes": null, "length": 8608}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["                        &nbsp;(<span class=\"warning\">extra: %(diff)s</span>)<br />"], "all_classes": null, "length": 11089}
{"pred": "", "answers": ["        if type(text) == int:"], "all_classes": null, "length": 9909}
{"pred": " public RESULT createSound(IntPtr data, MODE mode, ref CREATESOUNDEXINFO exinfo, ref Sound sound) { RESULT result = RESULT.OK; IntPtr soundraw = new IntPtr(); Sound soundnew = null; try { result = FMOD_System_CreateSound(systemraw, data, mode, ref exinfo, ref soundraw); } catch { result = RESULT.ERR_INVALID_PARAM; } if( result != RESULT.OK ) { return result; } if( sound == null ) { soundnew = new Sound(); soundnew.setRaw( soundraw ); sound = soundnew; } else { sound.setRaw( soundraw ); } return result; } ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14097}
{"pred": " escape(desc)) ", "answers": ["                            desc = escape(desc)"], "all_classes": null, "length": 8020}
{"pred": " self.inputShape = int(inputShape[0]), int(inputShape[1]) ", "answers": ["                    columnNum // self.coincidencesShape[1],"], "all_classes": null, "length": 8992}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        check_nodes = [self.new_node_uuid, self.other_node_uuid]"], "all_classes": null, "length": 8172}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        complt += '\\t\\t\\t\\t\\t-\"'"], "all_classes": null, "length": 8122}
{"pred": " } ", "answers": ["                if (m_ControlMaster != null)"], "all_classes": null, "length": 9893}
{"pred": " } ", "answers": ["        if (contains) {"], "all_classes": null, "length": 10298}
{"pred": " } ", "answers": ["                            side1 += bmp_mono[n1];"], "all_classes": null, "length": 8006}
{"pred": " case 7: ", "answers": ["\t\t\t z = new double[3];"], "all_classes": null, "length": 9193}
{"pred": "", "answers": ["        RowMetaInterface tabFields = getTableFields(tableName);"], "all_classes": null, "length": 9895}
{"pred": " } ", "answers": ["\t\t\tfeIndex = rand.nextInt(allFE.size());"], "all_classes": null, "length": 8696}
{"pred": " The code provided is a Python class definition for the `AuiToolBar` class, which represents a completely owner-drawn toolbar perfectly integrated with the AUI layout system. This class allows drag and drop of toolbars, docking/floating behavior, and the possibility to define \"overflow\" items in the toolbar itself. The default theme used is `AuiDefaultToolBarArt`, which provides a modern, glossy look and feel. The theme can be changed by calling `AuiToolBar.SetArtProvider`. ", "answers": ["        Handles the ``wx.EVT_LEAVE_WINDOW`` event for L{AuiToolBar}."], "all_classes": null, "length": 11431}
{"pred": " } ", "answers": ["            mute = (m != 0);"], "all_classes": null, "length": 9240}
{"pred": " public async Task<HookResult> AfterIntro(NpcScript npc, params object[] args) ", "answers": ["\tprotected override int QuestId { get { return 519436; } }"], "all_classes": null, "length": 9147}
{"pred": " } catch( java.io.IOException e ) { throw e; } catch( java.lang.ClassNotFoundException e ) { throw e; } finally { try{ bais.close(); } catch( Exception e ){EncogLogging.log(e);} } } } ", "answers": ["            try{ ois.close();  } catch( Exception e ){EncogLogging.log(e);}"], "all_classes": null, "length": 8136}
{"pred": "", "answers": ["                if e.nodeType == e.ELEMENT_NODE and e.localName == \"layout\":"], "all_classes": null, "length": 8661}
{"pred": " } ", "answers": ["                numBits = (numBits >> 1) + 1;"], "all_classes": null, "length": 8360}
{"pred": "", "answers": ["        for pos, idx in enumerate(cdata):"], "all_classes": null, "length": 10029}
{"pred": " register_Ns3NetDeviceContainer_methods(root_module, root_module['ns3::NetDeviceContainer']) ", "answers": ["                   is_const=True, is_virtual=True, is_pure_virtual=True)"], "all_classes": null, "length": 10722}
{"pred": " out.printil(\"if (_jspx_resourceInjector != null) {\"); ", "answers": ["                    Node bodyElement = body.getNode(0);"], "all_classes": null, "length": 9144}
{"pred": " } ", "answers": ["\t\t\t\t\tif (PreProcessMessage (ref msg))"], "all_classes": null, "length": 9784}
{"pred": " The next line of code is missing. ", "answers": ["        if os.path.exists(md_file_path) is False:"], "all_classes": null, "length": 9108}
{"pred": "", "answers": ["            package = package.rpartition('.')[0]"], "all_classes": null, "length": 8094}
{"pred": " } ", "answers": ["                var methodGroup = (BoundMethodGroup)expression;"], "all_classes": null, "length": 8696}
{"pred": "", "answers": ["            search_reg_str = '\\\\b%s\\\\b' % search_terms.replace(' ',"], "all_classes": null, "length": 11879}
{"pred": "", "answers": ["                if not self.__IsKeyword(\"FV\"):"], "all_classes": null, "length": 10845}
{"pred": "", "answers": ["      headers_phase = PBXHeadersBuildPhase()"], "all_classes": null, "length": 11459}
{"pred": "", "answers": ["    post = {'node_ids[{}]'.format(i): n for i, n in enumerate(x)}"], "all_classes": null, "length": 14106}
{"pred": " } else { ", "answers": ["                        if (useExponentialNotation) {"], "all_classes": null, "length": 11534}
{"pred": " class RichTextCtrl(_core.Control): def __init__(self, *args, **kwargs): \"\"\" __init__(self, Window parent, int id=-1, String value=EmptyString, Point pos=DefaultPosition, Size size=DefaultSize, long style=RE_MULTILINE, Validator validator=DefaultValidator, String name=RichTextCtrlNameStr) -> RichTextCtrl \"\"\" _richtext.RichTextCtrl_swiginit(self,_richtext.new_RichTextCtrl(*args, **kwargs)) self._setOORInfo(self) def Create(*args, **kwargs): \"\"\" Create(self, Window parent, int id=-1, String value=EmptyString, Point pos=DefaultPosition, Size size=DefaultSize, long style=RE_MULTILINE, Validator validator=DefaultValidator, String name=RichTextCtrlNameStr) -> bool \"\"\" return _richtext.RichTextCtrl_Create(*args, **kwargs) def GetValue(*args, **kwargs): \"\"\" GetValue(self) -> String \"\"\" return _richtext.RichTextCtrl_GetValue(*args, **kwargs) def SetValue(*args, **kwargs): \"\"\" SetValue(self, String value)\"\"\" return _richtext.RichTextCtrl_SetValue(*args, **kwargs) def GetRange(*args, **kwargs): \"\"\" GetRange(self, long from, long to) -> String \"\"\" return _richtext.RichTextCtrl_GetRange(*args, **kwargs) def GetLineLength(*args, **kwargs): \"\"\" GetLineLength(self, long lineNo) -> int \"\"\" return _richtext.RichTextCtrl_GetLineLength(*args, **kwargs) def GetLineText(*args, **kwargs): \"\"\" GetLineText(self, long lineNo) -> String \"\"\" return _richtext.RichTextCtrl_GetLineText(*args, **kwargs) def GetNumberOfLines(*args, **kwargs): \"\"\" GetNumberOfLines(self) -> int \"\"\" return _richtext.RichTextCtrl_GetNumberOfLines(*args, **kwargs) def IsModified(*args, **kwargs): \"\"\" IsModified(self) -> bool \"\"\" return _richtext.RichTextCtrl_IsModified(*args, **kwargs) def IsEditable(*args, **kwargs): \"\"\" IsEditable(self) -> bool \"\"\" return _richtext.RichTextCtrl_IsEditable(*args, **kwargs) def IsSingleLine(*args, **kwargs): \"\"\" IsSingleLine(self) -> bool \"\"\" return _richtext.RichTextCtrl_IsSingleLine(*args, **kwargs) def IsMultiLine(*args, **kwargs): \"\"\" IsMultiLine(self) -> bool \"\"\" return _richtext.RichTextCtrl_IsMultiLine(*args, **kwargs) def GetSelection(*args, **kwargs): \"\"\" GetSelection() --> (start, end) Returns the start and end positions of the current selection. :param args: :param kwargs: :return: :rtype: (start, end): tuple \"\"\" return _richtext.RichTextCtrl_GetSelection(*args, **kwargs) def GetStringSelection(*args, **kwargs): \"\"\" GetStringSelection(self) -> String \"\"\" return _richtext.RichTextCtrl_GetStringSelection(*args, **kwargs) def GetFilename(*args, **kwargs): \"\"\" GetFilename(self) -> String \"\"\" return _richtext.RichTextCtrl_GetFilename(*args, **kwargs) def SetFilename(*args, **kwargs): def __init__(self, *args", "answers": ["        BeginBatchUndo(self, String cmdName) -> bool"], "all_classes": null, "length": 9452}
{"pred": "", "answers": ["  exec lighttpdSvc.sh < /dev/null"], "all_classes": null, "length": 8611}
{"pred": " } ", "answers": ["    if (tractor.getY() - target.getY() == -2) {"], "all_classes": null, "length": 8405}
{"pred": " ret['changed'] = vms_module.changed ", "answers": ["        elif state == 'suspended':"], "all_classes": null, "length": 8276}
{"pred": " ModeFactory.getMode(\"Channel_queries\", \"channel_subscriptions\"); ", "answers": ["        List<Map> subDr = Collections.EMPTY_LIST;"], "all_classes": null, "length": 10246}
{"pred": " } ", "answers": ["            int size = libs.size();"], "all_classes": null, "length": 8562}
{"pred": "", "answers": ["            hqrndseed(s0, s1, state, _params);"], "all_classes": null, "length": 18518}
{"pred": " case 2: ", "answers": ["                hr = (float) radii.getTopRightHorizontalRadius();"], "all_classes": null, "length": 9945}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        group.add_option(\"\", \"--rpmverbosity\", default=None,"], "all_classes": null, "length": 8933}
{"pred": "", "answers": ["            while (!successful && retryCount-- > 0) try {"], "all_classes": null, "length": 10896}
{"pred": " } ", "answers": ["                        if (guid == existingDoc.SourceHashKind)"], "all_classes": null, "length": 8489}
{"pred": " The next line of code is: ", "answers": ["                    if self.tok[0] != ')':"], "all_classes": null, "length": 10276}
{"pred": " The code provided is a Python file that defines a class called \"LoncapaResponse\" which is the base class for different types of responses in the CAPA system. The class has various attributes and methods, including \"get_score\", \"get_answers\", \"get_extended_hints\", \"get_compound_hints\", and others. The code also includes subclasses such as \"ChoiceResponse\", \"MultipleChoiceResponse\", \"TrueFalseResponse\", \"CustomResponse\", \"SymbolicResponse\", \"CodeResponse\", \"ExternalResponse\", \"FormulaResponse\", \"SchematicResponse\", \"ImageResponse\", and \"AnnotationResponse\". Each subclass inherits from the \"LoncapaResponse\" class and overrides its methods to provide specific functionality for its type of response. ", "answers": ["        options_value = json_d.get('options', [])"], "all_classes": null, "length": 13691}
{"pred": " pMem.z = z; ", "answers": ["          Debug.Assert( pMem.z != null );"], "all_classes": null, "length": 8052}
{"pred": "", "answers": ["        json_data = json.loads(str(form['jsondata']))"], "all_classes": null, "length": 9234}
{"pred": "", "answers": ["                disk_type = expected_disk_spec.get('type', '').lower()"], "all_classes": null, "length": 9014}
{"pred": " } ", "answers": ["\t\t\treturn names [(int) ot] [1];"], "all_classes": null, "length": 8622}
{"pred": " } ", "answers": ["                this.Children = new ArrayList();"], "all_classes": null, "length": 8049}
{"pred": " The code provided is a part of the OpenERP management solution and is used for various operations related to stock management, including creating and managing stock journals, locations, and pickings. The code includes functions for creating and modifying stock moves, handling inventory, and managing production lots. It also includes functions for creating and managing invoices, and handling various states of stock moves and pickings. The code is written in Python and uses the OpenERP framework. ", "answers": ["        if acc_src == acc_valuation:"], "all_classes": null, "length": 9425}
{"pred": "", "answers": ["    out : array of datetime64[D]"], "all_classes": null, "length": 23278}
{"pred": "", "answers": ["                subsets = dim_coord_subset()"], "all_classes": null, "length": 8031}
{"pred": "", "answers": ["\tlong /*int*/ hRegion = 0;"], "all_classes": null, "length": 16705}
{"pred": "", "answers": ["                    operation_parts = {'pid': person_id,"], "all_classes": null, "length": 8290}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["            u\"User %s (%s) opted in to receive emails from course %s\","], "all_classes": null, "length": 8301}
{"pred": "", "answers": ["        if len(arrayObjectMemberTypes) > 0:"], "all_classes": null, "length": 12254}
{"pred": " The code provided is a Python module named \"pyparsing.py\" that defines a class called \"ParseElement\" and several other classes and methods related to parsing grammars. The module includes functions for handling whitespace, comments, quoted strings, and embedded comments. It also includes classes for matching specific types of tokens, such as keywords, literals, and regular expressions. The code is designed to provide a library of classes that can be used to construct grammars directly in Python, making it easier to create text parsers without needing to learn a new syntax for defining grammars or matching expressions. ", "answers": ["                    tokenlist[ikey] = _ParseResultsWithOffset(dictvalue,i)"], "all_classes": null, "length": 11936}
{"pred": "", "answers": ["    if matched_zero and matched_zero.group(1) != '0':"], "all_classes": null, "length": 20316}
{"pred": "", "answers": ["          if after == NULL_HASH:"], "all_classes": null, "length": 10689}
{"pred": "", "answers": ["            url = field_get_subfield_values(fft, 'a')"], "all_classes": null, "length": 8249}
{"pred": " } ", "answers": ["        ArrayList<Integer> l = new ArrayList<>();"], "all_classes": null, "length": 9563}
{"pred": " public static void fftc1dinv(ref complex[] a, int n) ", "answers": ["            c = new double[m];"], "all_classes": null, "length": 10316}
{"pred": " } ", "answers": ["            \"\\x1FF2\\x1F7C\\x03B9\", /* 1FF2; 1F7C 03B9; Case map */"], "all_classes": null, "length": 14273}
{"pred": " } ", "answers": ["        if (bImg == null) {"], "all_classes": null, "length": 14028}
{"pred": " } else { PackageFragmentRoot root = (PackageFragmentRoot) JavaCore.create(fileName); char[] pkgName = CharOperation.subarray(fileName, pkgEnd); char[][] compoundName = CharOperation.splitOn('/', pkgName); return root.getPackageFragment(CharOperation.toStrings(compoundName)); } } ", "answers": ["      Path path = new Path(new String(fileName, 0, pkgEnd));"], "all_classes": null, "length": 9133}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["                if adding and rhs != \"\":"], "all_classes": null, "length": 8273}
{"pred": " if token_type == tokenize.NEWLINE: logical.append((end_line, end)) continue previous = (t[2][0], t[2][1]) else: logical.append((t[2][0], t[2][1])) return logical ", "answers": ["                start_line, start = t[2]"], "all_classes": null, "length": 8040}
{"pred": "", "answers": ["        with open(filename, \"r\") as inputfile:"], "all_classes": null, "length": 9404}
{"pred": " } ", "answers": ["\t\t\t\tif (mediaEncoderItems.Length != 3)"], "all_classes": null, "length": 11381}
{"pred": "", "answers": ["            for k in self.splitKeySet.intersection(tree2.splitKeySet):"], "all_classes": null, "length": 10347}
{"pred": "", "answers": ["                kwargs = dict(kwargs)"], "all_classes": null, "length": 11922}
{"pred": " @classmethod def _listen(cls, event_key, retval=False, **kw): target, identifier, fn = event_key.dispatch_target, event_key.identifier, event_key._listen_fn if not retval: def wrap(*arg, **kw): if not retval: query = arg[0] fn(*arg, **kw) return query else: fn(*arg, **kw) return query event_key = event_key.with_wrapper(wrap) event_key.base_listen(**kw) if propagate: for mgr in target.subclass_managers(True): event_key.with_dispatch_target(mgr).base_listen(propagate=True) else: event_key.base_listen(**kw) @classmethod def _clear(cls): super(QueryEvents, cls)._clear() event_key._clear() def after_compile(self, query): \"\"\"Receive the :class:`.Query` object after it has been compiled into a core :class:`.Select` object. This event is intended to allow changes to the query given:: @event.listen(Query, \"after_compile\", retval=True) def no_deleted(query): for desc in query.column_descriptions: if desc['type'] is User: entity = desc['entity'] query = query.filter(entity.deleted == False) return query The event should normally be listened with the ``retval=True`` parameter set, so that the modified query may be returned. \"\"\" @classmethod def _listen( cls, event_key, retval=False, **kw): fn = event_key._listen_fn if not retval: def wrap(*arg, **kw): if not retval: query = arg[0] fn(*arg, **kw) return query else: fn(*arg, **kw) event_key = event_key.with_wrapper(wrap) event_key.base_listen(**kw) if propagate: for mgr in target.subclass_managers(True): event_key.with_dispatch_target(mgr).base_listen( propagate=True ) else: event_key.base_listen(**kw) @classmethod def _clear( cls ): super(QueryEvents, cls)._clear() event_key._clear() def before_execute(self, query, connection, params): \"\"\"Receive the :class:`.Query` object before it is executed. This event is intended to allow changes to the query given:: @event.listen(Query, \"before_execute\", retval=True) def no_deleted(query): for desc in query.column_descriptions: if desc['type'] is User: entity = desc['entity'] query = query.filter(entity.deleted == False) return query The event should normally be listened with the ``retval=True`` parameter set, so that the modified query may be returned. \"\"\" @classmethod def _listen( cls, event_key, retval=False, **kw ): fn = event_key._listen_fn if not retval: def wrap(*arg, **kw): if not retval: query = arg[0] fn(*arg, **kw) return query else: fn(*arg, **kw) event_key = event_key.with_wrapper(wrap) event_key.base_listen(**kw) if propagate: for mgr in target.subclass_managers(True): event_key.with_dispatch_target(mgr).base_listen( propagate=True ) else: event_key.base_listen(**kw) @classmethod def _clear( cls ): super(QueryEvents, cls)._clear() event_key._clear() def after_execute(self, query, connection, params): \"\"\"Receive the :class:`.Query` object after it has been executed. This event is intended to allow changes to the query given:: @event.listen(Query, \"after_execute\", retval=True) def no_deleted(query): for desc in query.column_descriptions: if desc['type'] is User: entity = desc['entity'] query = query.filter(entity.deleted == False) return query The event should normally be listened with the ``retval=True`` parameter set, so that the modified query may be returned. \"\"\" @classmethod def _listen( cls, event_key, retval=False, **kw ): fn = event_key._listen_fn if not retval: def wrap(*arg, **kw): if not retval: query = arg[0] fn(*arg, **kw) return query else: fn(*arg, **kw) event_key = event_key.with_wrapper(wrap) event_key.base_listen(**kw) if propagate: for mgr in target.subclass_managers(True): event_key.with_dispatch_target(mgr).base_listen( propagate=True ) else: event_key.base_listen(**kw) @classmethod def _clear( cls ): super(QueryEvents, cls)._clear() event_key._clear() def before_fetch(self, query, connection, params): \"\"\"Receive the :class:`.Query` object before it fetches rows from the database. This event is intended to allow changes to the query given:: @event.listen(Query, \"before_fetch\", retval=True) def no_deleted(query): for desc in query.column_descriptions: if desc['type'] is User: entity = desc['entity'] query = query.filter(entity.deleted == False) return query The event should normally be listened with the ``retval=True`` parameter set, so that the modified query may be returned. \"\"\" @classmethod def _listen( cls, event_key, retval=False, **kw ): fn = event_key._listen_fn if not retval: def wrap(*arg, **kw): if not retval: query = arg[0] fn(*arg, **kw) return query else: fn(*arg, **kw) event_key = event ", "answers": ["                    return fn(*arg, **kw)"], "all_classes": null, "length": 9203}
{"pred": " } ", "answers": ["                int margin = a.getDimensionPixelSize(MARGIN, DEFAULT_MARGIN);"], "all_classes": null, "length": 9007}
{"pred": " The code provided is a Java class named \"ConnectionImpl\" that implements the MPCoreConnection and TransactionCallback interfaces. It is part of the IBM WebSphere SIB (Service Integration Bus) messaging system. The class is responsible for managing connections to the Message Processor, handling transactions, and managing various sessions such as Producer, Consumer, and Browser sessions. It also includes methods for creating and deleting durable subscriptions, and handling exceptions related to connection availability, incorrect call exceptions, and security-related issues. ", "answers": ["        if (TraceComponent.isAnyTracingEnabled() && tc.isEntryEnabled())"], "all_classes": null, "length": 9441}
{"pred": "", "answers": ["                if ((object)leftType == null)"], "all_classes": null, "length": 15198}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        if expression in ('1', 'True'): return True"], "all_classes": null, "length": 8731}
{"pred": " for (int j = 0; j < dsize; j++) { ", "answers": ["      if (featureVals != null)"], "all_classes": null, "length": 8316}
{"pred": " internal struct LeafMethodList ", "answers": ["        internal string name; // length prefixed name of method"], "all_classes": null, "length": 9110}
{"pred": " } ", "answers": ["            if (GL.GetString(StringName.Version).StartsWith(\"GL ES\"))"], "all_classes": null, "length": 8378}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["    return (0, CFG_WEBACCESS_WARNING_MSGS[0])"], "all_classes": null, "length": 11744}
{"pred": " The code provided is a Python class representing a UDF Volume Structure. It includes methods for parsing, recording, and manipulating the structure's data. The class has attributes such as `new_extent_loc`, `orig_extent_loc`, `new_extent_loc`, and others. The methods include `parse`, `record`, `new`, `extent_location`, and `set_extent_location`. ", "answers": ["        self.impl_id = UDFEntityID()"], "all_classes": null, "length": 10644}
{"pred": "", "answers": ["                            result = concat(values, keys=key_index,"], "all_classes": null, "length": 9883}
{"pred": "", "answers": ["            case '-': // subFlag then fall through"], "all_classes": null, "length": 10915}
{"pred": " } ", "answers": ["        final VMInstanceVO vm = _vmDao.findByUuid(vmUuid);"], "all_classes": null, "length": 8853}
{"pred": "", "answers": ["        W_nk = self._computeWeights(recalc_denom=True)"], "all_classes": null, "length": 12510}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["        d = self.shell.stat(('ned',), ('size', 'directory'))"], "all_classes": null, "length": 8415}
{"pred": "", "answers": ["                if( b >= 0 ) {"], "all_classes": null, "length": 9989}
{"pred": " } ", "answers": ["            if (b == null)  return a;"], "all_classes": null, "length": 10923}
{"pred": " } ", "answers": ["\t\t\t\t\t\t\t\tresults.Sort( AccountComparer.Instance );"], "all_classes": null, "length": 9034}
{"pred": " public const string dll = \"fmodex\"; ", "answers": ["            if (result != RESULT.OK)"], "all_classes": null, "length": 14660}
{"pred": " } ", "answers": ["                tbl_ix = data[base] & 255;"], "all_classes": null, "length": 16751}
{"pred": " public static void SystemBroadcastKills_OnCommand(CommandEventArgs e) ", "answers": ["                    this.AddLabel(x2 + 30, 215, 55, a.Text(200233));  // \"DeathBall\""], "all_classes": null, "length": 8017}
{"pred": "", "answers": ["            TemplateRow = TemplateDT.NewRowTyped(false);"], "all_classes": null, "length": 8754}
{"pred": " } ", "answers": ["\t\tif (gfp != null && gfp.class_id == LAME_ID) {"], "all_classes": null, "length": 8018}
{"pred": "", "answers": ["                if (AllSubmissionsOK == false)"], "all_classes": null, "length": 8128}
{"pred": " The next line of code is not provided in the given context. ", "answers": ["                    elif name == \"requires\":"], "all_classes": null, "length": 9136}
